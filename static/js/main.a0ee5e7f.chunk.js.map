{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","redux/phonebooks/phonebooks-actions.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","redux/phonebooks/phonebooks-reducer.js","redux/phonebooks/store.js","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","ContactForm","inputId","state","handleInputChange","evt","console","log","currentTarget","value","setState","handleSubmit","preventDefault","props","contacts","find","contact","alert","reset","className","styles","container","onSubmit","this","form","htmlFor","label","type","pattern","title","required","onChange","Component","connect","items","dispatch","phonebooksActions","filter","оnChange","e","getVisibleContacts","allContacts","filterNormalize","toLowerCase","includes","onDeleteContact","map","contactList","onClick","App","createReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","phonebooksReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.a0ee5e7f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactForm_container__Dqfho\",\"label\":\"ContactForm_label__2WMBg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__29gGn\"};","import { v4 as uuidv4 } from 'uuid';\r\n// import types from './phonebooks-types';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const addContact = createAction('phonebooks/add', (name, number) => {\r\n    return {\r\n        payload: {\r\n            name: name,\r\n            number: number,\r\n            id: uuidv4()\r\n        }\r\n    }\r\n})\r\n// console.log(addContact('ku-ku', 55));\r\n\r\n// export const addContact = (name, number) => ({\r\n//     type: types.ADD,\r\n//     payload: {\r\n//         name: name,\r\n//         number: number,\r\n//         id: uuidv4()\r\n\r\n//     },\r\n\r\n// });\r\n\r\nexport const deleteContact = createAction('phonebooks/delete')\r\n// export const deleteContact = idFromContact => ({\r\n//     type: types.DELETE,\r\n//     payload: idFromContact,\r\n// })\r\n\r\nexport const changeFilter = createAction('phonebooks/changeFilter')\r\n// export const changeFilter = value => ({\r\n//     type: types.CHANGE_FILTER,\r\n//     payload: value,\r\n// })\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport styles from './ContactForm.module.css';\r\n// import PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n// import { number } from 'yargs';\r\nimport * as phonebooksActions from '../../redux/phonebooks/phonebooks-actions';\r\n\r\n// import * as actions from 'redux/contacts/contacts-actions';\r\n\r\nclass ContactForm extends Component {\r\n    inputId = uuidv4();\r\n    state = {\r\n        name: '',\r\n        number: '',\r\n\r\n    };\r\n    handleInputChange = evt => {\r\n        console.log(evt.currentTarget.value);\r\n        const { name, value } = evt.currentTarget;\r\n        this.setState({ [name]: value });\r\n\r\n    };\r\n    handleSubmit = evt => {\r\n        evt.preventDefault();\r\n        // if(this.state.name)\r\n        // this.props.addContact(this.state.name, this.state.number);\r\n        // this.setState({ name: \"\", number: \"\" });\r\n\r\n\r\n        const findContact = this.props.contacts.find(contact => contact.name === this.state.name && contact.number === this.state.number);\r\n\r\n\r\n        if (findContact) {\r\n            alert(`${this.state.name} is already in contacts!`);\r\n            this.reset();\r\n            return;\r\n        }\r\n        this.props.addContact(this.state.name, this.state.number);\r\n        // this.setState({ name: \"\", number: \"\" });\r\n        this.reset();\r\n    }\r\n    reset = () => {\r\n        this.setState({ name: '', number: '' });\r\n        //   this.setState(prevState => ({\r\n        //     contacts: [nameFromInput, ...prevState.contacts],\r\n        //   }));\r\n\r\n\r\n\r\n    };\r\n    render() {\r\n        return (\r\n\r\n            <div className={styles.container}>\r\n                <form onSubmit={this.handleSubmit} className={styles.form}>\r\n                    <label htmlFor={this.inputId} className={styles.label}>\r\n\r\n                        Name:\r\n\r\n                        <input\r\n                            className=\"Container-form__input\"\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                            required\r\n                            value={this.state.name}\r\n                            onChange={this.handleInputChange}\r\n                            id={this.inputId}\r\n                        />\r\n                    </label>\r\n                    <label className={styles.label}>\r\n                        Number:\r\n                        <input\r\n                            type=\"tel\"\r\n                            name=\"number\"\r\n                            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                            value={this.state.number}\r\n                            onChange={this.handleInputChange}\r\n                            // id={this.inputId}\r\n                            required\r\n                        />\r\n                    </label>\r\n\r\n                    {/* <Filter value = {this.state.filter} оnChange = {this.changeFilter} /> */}\r\n\r\n                    <button type=\"submit\" className=\"Container-form__btn\">Add Contact</button>\r\n                </form>\r\n\r\n                {/* <ContactList contacts={visibleContacts}/> */}\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: state.contacts.items,\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    addContact: (name, number) => dispatch(phonebooksActions.addContact(name, number)),\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n// import styles from './Filter.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport * as phonebooksActions from '../../redux/phonebooks/phonebooks-actions';\r\n\r\nconst Filter = ({ value, оnChange }) => (\r\n    <label>\r\n        FInd contacts by name\r\n        <input\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={оnChange}\r\n        />\r\n    </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    value: state.contacts.filter\r\n\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    оnChange: e => dispatch(phonebooksActions.changeFilter(e.currentTarget.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport styles from './ContactList.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport * as phonebooksActions from '../../redux/phonebooks/phonebooks-actions';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n    return (\r\n        <div className=\"Contact-container\">\r\n            {/* <h2 className=\"Contact-container__title\">Contacts</h2> */}\r\n            <ul >\r\n                {contacts.map(contact => (\r\n                    <li className={styles.contactList} key={uuidv4()}>{contact.name} : {contact.number}\r\n                        <button onClick={() => onDeleteContact(contact.id)} >Delete</button>\r\n                    </li>))\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n};\r\n\r\nContactList.propTypes = {\r\n    contact: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            name: PropTypes.string.isRequired,\r\n            number: PropTypes.string.isRequired,\r\n            id: PropTypes.string.isRequired,\r\n\r\n        })\r\n    ),\r\n};\r\n\r\n\r\nconst getVisibleContacts = (allContacts, filter) => {\r\n    const filterNormalize = filter.toLowerCase();\r\n\r\n    return allContacts.filter(contact =>\r\n        contact.name.toLowerCase().includes(filterNormalize),\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n    contacts: getVisibleContacts(items, filter),\r\n});\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onDeleteContact: id => dispatch(phonebooksActions.deleteContact(id)),\r\n    // contacts: () => null,\r\n\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\n\r\n\r\n// const getVisibleContacts = (allContacts, filter) => {\r\n//     const filterNormalize = filter.toLowerCase();\r\n\r\n//     return allContacts.filter(contact =>\r\n//         contact.name.toLowerCase().includes(filterNormalize),\r\n//     );\r\n// };\r\n\r\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n//     contactsData: getVisibleContacts(items, filter),\r\n// });","import React, { Component } from \"react\";\n\nimport ContactForm from './components/ContactForm';\n// import { v4 as uuidv4 } from 'uuid';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n\n\nclass App extends Component {\n  state = {\n    // contacts: [\n    //   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    //   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    //   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    //   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    // ],\n    // filter: '',\n  }\n\n  // componentDidMount() {\n  //   // console.log('пришел ДИДМАУНТ');\n  //   const contacts = localStorage.getItem('myLocalStorageContacts');\n  //   const parsedContacts = JSON.parse(contacts);\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts })\n  //   }\n  //   console.log(parsedContacts);\n  // }\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem('myLocalStorageContacts', JSON.stringify(this.state.contacts))\n  //   }\n  // }\n\n  // changeFilter = e => this.setState({ filter: e.currentTarget.value });\n\n  // getVisibleContacts = () => {\n  //   const normalizedFilter = this.state.filter.toLowerCase();\n  //   return this.state.contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter),\n  //   );\n  // };\n\n  // addContact = (name, number) => {\n  //   const idContact = uuidv4();\n  //   const nameFromInput = { name: name, number: number, id: idContact };\n  //   const findContact = this.state.contacts.find(contact => contact.name === name && contact.number === number);\n\n\n  //   if (findContact) {\n  //     alert(`${name} is already in contacts!`);\n  //     return;\n  //   }\n\n  //   this.setState(prevState => ({\n  //     contacts: [nameFromInput, ...prevState.contacts],\n  //   }));\n  // };\n\n  // deleteContact = (idFromContact) => {\n  //   this.setState(prevState => ({\n  //     contacts: prevState.contacts.filter(contact =>\n  //       contact.id !== idFromContact),\n  //   }))\n  // }\n\n  render() {\n    // const visibleContacts = this.getVisibleContacts();\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm />\n\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n\n{/* <ContactForm addContact={this.addContact} /> */ }\n{/* <ContactList contacts={visibleContacts} onDeleteContact={this.deleteContact} /> */ }\n{/* <Filter value={this.state.filter} оnChange={this.changeFilter} /> */ }","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n// import types from './phonebooks-types';\r\nimport * as phonebooksActions from './phonebooks-actions';\r\n\r\n// import actions from './phonebooks-actions';\r\n// {\r\n//     contacts: {\r\n//         items: [],\r\n//             filter: ''\r\n//     }\r\n// }\r\n\r\nconst items = createReducer([], {\r\n    [phonebooksActions.addContact]: (state, { payload }) => [payload, ...state],\r\n    [phonebooksActions.deleteContact]: (state, { payload }) => state.filter(contact =>\r\n        contact.id !== payload),\r\n})\r\n// const items = (\r\n//     state = [], { type, payload }) => {\r\n//     switch (type) {\r\n//         case types.ADD:\r\n//             return [payload, ...state];\r\n//         case types.DELETE:\r\n//             return state.filter(contact =>\r\n//                 contact.id !== payload)\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n\r\n\r\nconst filter = createReducer('', {\r\n    [phonebooksActions.changeFilter]: (_, { payload }) => payload,\r\n})\r\n// const filter = (state = '', { type, payload }) => {\r\n//     switch (type) {\r\n//         case types.CHANGE_FILTER:\r\n//             return payload;\r\n//         default:\r\n//             return state;\r\n//     }\r\n\r\n// };\r\n\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter\r\n})\r\n\r\n\r\n\r\n            // const findContact = state.find(contact => contact.name === payload.name && contact.number === payload.number);\r\n\r\n\r\n            // if (findContact) {\r\n            //     alert(`${payload.name} is already in contacts!`);\r\n            //     break;\r\n            // }","// import { combineReducers } from \"redux\";\r\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from 'redux-logger';\r\nimport {\r\n    persistStore, persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport phonebooksReducer from \"./phonebooks-reducer\";\r\n\r\n\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n    serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\r\n    }\r\n}),\r\n    logger,\r\n];\r\n\r\n// const rootReducer = combineReducers({\r\n//     contacts: persistReducer(persistConfig, phonebooksReducer),\r\n// })\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\nconst contactsPersistConfig = {\r\n    key: 'myLocalStorageContacts',\r\n    storage,\r\n    blacklist: ['filter'],\r\n}\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: persistReducer(contactsPersistConfig, phonebooksReducer),\r\n    },\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport store from './redux/phonebooks/store';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}